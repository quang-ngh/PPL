# Generated from main/mt22/parser/MT22.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,68,390,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,4,0,139,8,0,11,0,12,0,140,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,5,4,155,8,4,10,4,12,4,
        158,9,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,169,8,5,10,5,12,
        5,172,9,5,1,5,1,5,1,6,1,6,5,6,178,8,6,10,6,12,6,181,9,6,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
        22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
        24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,
        28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,
        34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,
        39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
        44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,
        51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,
        57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,
        64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,156,0,68,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
        99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
        59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,
        1,0,30,3,0,8,10,12,13,32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,97,97,1,0,98,98,1,0,99,99,1,0,100,
        100,1,0,101,101,1,0,102,102,1,0,103,103,1,0,104,104,1,0,105,105,
        1,0,106,106,1,0,107,107,1,0,108,108,1,0,109,109,1,0,110,110,1,0,
        111,111,1,0,112,112,1,0,113,113,1,0,114,114,1,0,115,115,1,0,116,
        116,1,0,117,117,1,0,118,118,1,0,119,119,1,0,120,120,1,0,121,121,
        1,0,122,122,393,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
        0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
        0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
        1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
        0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
        0,0,0,1,138,1,0,0,0,3,144,1,0,0,0,5,146,1,0,0,0,7,148,1,0,0,0,9,
        150,1,0,0,0,11,164,1,0,0,0,13,175,1,0,0,0,15,182,1,0,0,0,17,190,
        1,0,0,0,19,195,1,0,0,0,21,202,1,0,0,0,23,211,1,0,0,0,25,216,1,0,
        0,0,27,222,1,0,0,0,29,225,1,0,0,0,31,230,1,0,0,0,33,236,1,0,0,0,
        35,240,1,0,0,0,37,243,1,0,0,0,39,249,1,0,0,0,41,258,1,0,0,0,43,266,
        1,0,0,0,45,272,1,0,0,0,47,279,1,0,0,0,49,287,1,0,0,0,51,293,1,0,
        0,0,53,298,1,0,0,0,55,301,1,0,0,0,57,303,1,0,0,0,59,305,1,0,0,0,
        61,307,1,0,0,0,63,309,1,0,0,0,65,311,1,0,0,0,67,314,1,0,0,0,69,317,
        1,0,0,0,71,320,1,0,0,0,73,323,1,0,0,0,75,325,1,0,0,0,77,327,1,0,
        0,0,79,330,1,0,0,0,81,332,1,0,0,0,83,335,1,0,0,0,85,338,1,0,0,0,
        87,340,1,0,0,0,89,342,1,0,0,0,91,344,1,0,0,0,93,346,1,0,0,0,95,348,
        1,0,0,0,97,350,1,0,0,0,99,352,1,0,0,0,101,354,1,0,0,0,103,356,1,
        0,0,0,105,358,1,0,0,0,107,360,1,0,0,0,109,362,1,0,0,0,111,364,1,
        0,0,0,113,366,1,0,0,0,115,368,1,0,0,0,117,370,1,0,0,0,119,372,1,
        0,0,0,121,374,1,0,0,0,123,376,1,0,0,0,125,378,1,0,0,0,127,380,1,
        0,0,0,129,382,1,0,0,0,131,384,1,0,0,0,133,386,1,0,0,0,135,388,1,
        0,0,0,137,139,7,0,0,0,138,137,1,0,0,0,139,140,1,0,0,0,140,138,1,
        0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,143,6,0,0,0,143,2,1,0,
        0,0,144,145,9,0,0,0,145,4,1,0,0,0,146,147,9,0,0,0,147,6,1,0,0,0,
        148,149,9,0,0,0,149,8,1,0,0,0,150,151,5,47,0,0,151,152,5,42,0,0,
        152,156,1,0,0,0,153,155,9,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,
        156,157,1,0,0,0,156,154,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,
        159,160,5,42,0,0,160,161,5,47,0,0,161,162,1,0,0,0,162,163,6,4,0,
        0,163,10,1,0,0,0,164,165,5,47,0,0,165,166,5,47,0,0,166,170,1,0,0,
        0,167,169,8,1,0,0,168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,
        0,170,171,1,0,0,0,171,173,1,0,0,0,172,170,1,0,0,0,173,174,6,5,0,
        0,174,12,1,0,0,0,175,179,7,2,0,0,176,178,7,3,0,0,177,176,1,0,0,0,
        178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,14,1,0,0,0,181,
        179,1,0,0,0,182,183,3,101,50,0,183,184,3,111,55,0,184,185,3,99,49,
        0,185,186,3,93,46,0,186,187,3,119,59,0,187,188,3,101,50,0,188,189,
        3,123,61,0,189,16,1,0,0,0,190,191,3,127,63,0,191,192,3,113,56,0,
        192,193,3,101,50,0,193,194,3,91,45,0,194,18,1,0,0,0,195,196,3,119,
        59,0,196,197,3,93,46,0,197,198,3,123,61,0,198,199,3,125,62,0,199,
        200,3,119,59,0,200,201,3,111,55,0,201,20,1,0,0,0,202,203,3,95,47,
        0,203,204,3,125,62,0,204,205,3,111,55,0,205,206,3,89,44,0,206,207,
        3,123,61,0,207,208,3,101,50,0,208,209,3,113,56,0,209,210,3,111,55,
        0,210,22,1,0,0,0,211,212,3,123,61,0,212,213,3,119,59,0,213,214,3,
        125,62,0,214,215,3,93,46,0,215,24,1,0,0,0,216,217,3,95,47,0,217,
        218,3,85,42,0,218,219,3,107,53,0,219,220,3,121,60,0,220,221,3,93,
        46,0,221,26,1,0,0,0,222,223,3,101,50,0,223,224,3,95,47,0,224,28,
        1,0,0,0,225,226,3,93,46,0,226,227,3,107,53,0,227,228,3,121,60,0,
        228,229,3,93,46,0,229,30,1,0,0,0,230,231,3,129,64,0,231,232,3,99,
        49,0,232,233,3,101,50,0,233,234,3,107,53,0,234,235,3,93,46,0,235,
        32,1,0,0,0,236,237,3,95,47,0,237,238,3,113,56,0,238,239,3,119,59,
        0,239,34,1,0,0,0,240,241,3,91,45,0,241,242,3,113,56,0,242,36,1,0,
        0,0,243,244,3,87,43,0,244,245,3,119,59,0,245,246,3,93,46,0,246,247,
        3,85,42,0,247,248,3,105,52,0,248,38,1,0,0,0,249,250,3,89,44,0,250,
        251,3,113,56,0,251,252,3,111,55,0,252,253,3,123,61,0,253,254,3,101,
        50,0,254,255,3,111,55,0,255,256,3,125,62,0,256,257,3,93,46,0,257,
        40,1,0,0,0,258,259,3,101,50,0,259,260,3,111,55,0,260,261,3,123,61,
        0,261,262,3,93,46,0,262,263,3,97,48,0,263,264,3,93,46,0,264,265,
        3,119,59,0,265,42,1,0,0,0,266,267,3,95,47,0,267,268,3,107,53,0,268,
        269,3,113,56,0,269,270,3,85,42,0,270,271,3,123,61,0,271,44,1,0,0,
        0,272,273,3,121,60,0,273,274,3,123,61,0,274,275,3,119,59,0,275,276,
        3,101,50,0,276,277,3,111,55,0,277,278,3,97,48,0,278,46,1,0,0,0,279,
        280,3,87,43,0,280,281,3,113,56,0,281,282,3,113,56,0,282,283,3,107,
        53,0,283,284,3,93,46,0,284,285,3,85,42,0,285,286,3,111,55,0,286,
        48,1,0,0,0,287,288,3,85,42,0,288,289,3,119,59,0,289,290,3,119,59,
        0,290,291,3,85,42,0,291,292,3,133,66,0,292,50,1,0,0,0,293,294,3,
        85,42,0,294,295,3,125,62,0,295,296,3,123,61,0,296,297,3,113,56,0,
        297,52,1,0,0,0,298,299,3,113,56,0,299,300,3,95,47,0,300,54,1,0,0,
        0,301,302,5,43,0,0,302,56,1,0,0,0,303,304,5,45,0,0,304,58,1,0,0,
        0,305,306,5,47,0,0,306,60,1,0,0,0,307,308,5,42,0,0,308,62,1,0,0,
        0,309,310,5,37,0,0,310,64,1,0,0,0,311,312,5,33,0,0,312,313,5,61,
        0,0,313,66,1,0,0,0,314,315,5,61,0,0,315,316,5,61,0,0,316,68,1,0,
        0,0,317,318,5,38,0,0,318,319,5,38,0,0,319,70,1,0,0,0,320,321,5,124,
        0,0,321,322,5,124,0,0,322,72,1,0,0,0,323,324,5,33,0,0,324,74,1,0,
        0,0,325,326,5,60,0,0,326,76,1,0,0,0,327,328,5,60,0,0,328,329,5,61,
        0,0,329,78,1,0,0,0,330,331,5,62,0,0,331,80,1,0,0,0,332,333,5,62,
        0,0,333,334,5,61,0,0,334,82,1,0,0,0,335,336,5,58,0,0,336,337,5,58,
        0,0,337,84,1,0,0,0,338,339,7,4,0,0,339,86,1,0,0,0,340,341,7,5,0,
        0,341,88,1,0,0,0,342,343,7,6,0,0,343,90,1,0,0,0,344,345,7,7,0,0,
        345,92,1,0,0,0,346,347,7,8,0,0,347,94,1,0,0,0,348,349,7,9,0,0,349,
        96,1,0,0,0,350,351,7,10,0,0,351,98,1,0,0,0,352,353,7,11,0,0,353,
        100,1,0,0,0,354,355,7,12,0,0,355,102,1,0,0,0,356,357,7,13,0,0,357,
        104,1,0,0,0,358,359,7,14,0,0,359,106,1,0,0,0,360,361,7,15,0,0,361,
        108,1,0,0,0,362,363,7,16,0,0,363,110,1,0,0,0,364,365,7,17,0,0,365,
        112,1,0,0,0,366,367,7,18,0,0,367,114,1,0,0,0,368,369,7,19,0,0,369,
        116,1,0,0,0,370,371,7,20,0,0,371,118,1,0,0,0,372,373,7,21,0,0,373,
        120,1,0,0,0,374,375,7,22,0,0,375,122,1,0,0,0,376,377,7,23,0,0,377,
        124,1,0,0,0,378,379,7,24,0,0,379,126,1,0,0,0,380,381,7,25,0,0,381,
        128,1,0,0,0,382,383,7,26,0,0,383,130,1,0,0,0,384,385,7,27,0,0,385,
        132,1,0,0,0,386,387,7,28,0,0,387,134,1,0,0,0,388,389,7,29,0,0,389,
        136,1,0,0,0,5,0,140,156,170,179,1,6,0,0
    ]

class MT22Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    ERROR_CHAR = 2
    UNCLOSE_STRING = 3
    ILLEGAL_ESCAPE = 4
    BLOCKCOMMENTS = 5
    INLINECOMMENT = 6
    IDENTIFIERS = 7
    INHERIT = 8
    VOID = 9
    RETURN = 10
    FUNCTION = 11
    TRUE = 12
    FALSE = 13
    IF = 14
    ELSE = 15
    WHILE = 16
    FOR = 17
    DO = 18
    BREAK = 19
    CONTINUE = 20
    INTEGER = 21
    FLOAT = 22
    STRING = 23
    BOOLEAN = 24
    ARRAY = 25
    AUTO = 26
    OF = 27
    ADD = 28
    SUBSTRACT = 29
    DIVIDE = 30
    MULTIPLY = 31
    MODULO = 32
    NOTEQUAL = 33
    EQUAL = 34
    AND = 35
    OR = 36
    NOT = 37
    LESS = 38
    LEQ = 39
    GREATER = 40
    GEQ = 41
    GLOBAL = 42
    A = 43
    B = 44
    C = 45
    D = 46
    E = 47
    F = 48
    G = 49
    H = 50
    I = 51
    J = 52
    K = 53
    L = 54
    M = 55
    N = 56
    O = 57
    P = 58
    Q = 59
    R = 60
    S = 61
    T = 62
    U = 63
    V = 64
    W = 65
    X = 66
    Y = 67
    Z = 68

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'/'", "'*'", "'%'", "'!='", "'=='", "'&&'", "'||'", 
            "'!'", "'<'", "'<='", "'>'", "'>='", "'::'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "BLOCKCOMMENTS", 
            "INLINECOMMENT", "IDENTIFIERS", "INHERIT", "VOID", "RETURN", 
            "FUNCTION", "TRUE", "FALSE", "IF", "ELSE", "WHILE", "FOR", "DO", 
            "BREAK", "CONTINUE", "INTEGER", "FLOAT", "STRING", "BOOLEAN", 
            "ARRAY", "AUTO", "OF", "ADD", "SUBSTRACT", "DIVIDE", "MULTIPLY", 
            "MODULO", "NOTEQUAL", "EQUAL", "AND", "OR", "NOT", "LESS", "LEQ", 
            "GREATER", "GEQ", "GLOBAL", "A", "B", "C", "D", "E", "F", "G", 
            "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", 
            "T", "U", "V", "W", "X", "Y", "Z" ]

    ruleNames = [ "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "BLOCKCOMMENTS", "INLINECOMMENT", "IDENTIFIERS", "INHERIT", 
                  "VOID", "RETURN", "FUNCTION", "TRUE", "FALSE", "IF", "ELSE", 
                  "WHILE", "FOR", "DO", "BREAK", "CONTINUE", "INTEGER", 
                  "FLOAT", "STRING", "BOOLEAN", "ARRAY", "AUTO", "OF", "ADD", 
                  "SUBSTRACT", "DIVIDE", "MULTIPLY", "MODULO", "NOTEQUAL", 
                  "EQUAL", "AND", "OR", "NOT", "LESS", "LEQ", "GREATER", 
                  "GEQ", "GLOBAL", "A", "B", "C", "D", "E", "F", "G", "H", 
                  "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", 
                  "T", "U", "V", "W", "X", "Y", "Z" ]

    grammarFileName = "MT22.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


